/*
  Telegram bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º —á–µ—Ä–µ–∑ ESP8266/Wemos
  
  –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—Ö–æ–¥ A0 (–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è)
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –ø—Ä–∏ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "Open":
    1. –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã (D1) –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã  
    2. –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–º–∫–∞ (D2) –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  
  –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:
  - D1 (GPIO5) - –æ–ø—Ç–æ–ø–∞—Ä–∞ PC817 –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–∞–º–µ—Ä—ã
  - D2 (GPIO4) - –æ–ø—Ç–æ–ø–∞—Ä–∞ PC817 –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–º–∫–∞  
  - A0 - –¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –æ—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞ (2x10–∫–û–º, –¥–µ–ª–∏—Ç 1.8–í‚Üí0.9–í)
  
  –ö–û–ú–ê–ù–î–´:
  - /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  - /status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
  - "Open" - –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞
*/

#ifdef ESP32
  #include <WiFi.h>
#else
  #include <ESP8266WiFi.h>
#endif
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
// Local secrets (not committed). See secrets.example.h for the template
#if defined(__has_include)
  #if __has_include("../secrets.h")
    #include "../secrets.h"
    #define SECRETS_SOURCE "Real secrets from ../secrets.h"
  #elif __has_include("secrets.h")
    #include "secrets.h"
    #define SECRETS_SOURCE "Real secrets from local secrets.h"
  #else
    #include "secrets.example.h"
    #define SECRETS_SOURCE "Template from secrets.example.h - NO REAL SECRETS FOUND!"
  #endif
#else
  #include "../secrets.h"
  #define SECRETS_SOURCE "Direct include ../secrets.h"
#endif

// Replace with your network credentials
const char* ssid = WIFI_SSID;
const char* password = WIFI_PASSWORD;

// Initialize Telegram BOT
#define BOTtoken BOT_TOKEN  // your Bot Token (from BotFather)

// Use @myidbot to find out the chat ID of an individual or a group
// Also note that you need to click "start" on a bot before it can message you
// CHAT_ID now defined in secrets.h

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// Polling period (ms)
int botRequestDelay = 2000;
unsigned long lastTimeBotRan;

// UniversalTelegramBot variables

// GPIO for onboard LED (optional)
const int ledPin = 2;
bool ledState = LOW;

// Intercom configuration
const int cameraPin = 5;       // GPIO5 (D1 on Wemos) - –∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã 
const int doorPin = 4;         // GPIO4 (D2 on Wemos) - –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞
const bool optocouplerActiveHigh = false; // PC817 –æ–ø—Ç–æ–ø–∞—Ä—ã –æ–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã –ø—Ä–∏ LOW

// Call detection configuration
const int callIndicatorPin = A0;  // –ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—Ö–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–∑–æ–≤–∞
const int normalVoltageThreshold = 200;  // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.9V —á–µ—Ä–µ–∑ –¥–µ–ª–∏—Ç–µ–ª—å = ~279, —Å—Ç–∞–≤–∏–º 200 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
const unsigned long callDebounceTime = 5000;  // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –≤—ã–∑–æ–≤–∞—Ö

// Call detection variables
bool callDetected = false;
bool lastCallState = false;
unsigned long lastCallTime = 0;

// Reply keyboard with one "Open" button (persistent chat menu)
static const char replyKeyboard[] = "[[\"Open\"]]";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞–º–µ—Ä—ã (2 —Å–µ–∫—É–Ω–¥—ã)
void pressCameraButton() {
  Serial.println("üé• === CAMERA BUTTON PRESS START ===");
  Serial.print("Setting pin "); Serial.print(cameraPin); 
  Serial.print(" to "); Serial.println(optocouplerActiveHigh ? "HIGH" : "LOW");
  
  digitalWrite(cameraPin, optocouplerActiveHigh ? HIGH : LOW);
  delay(2000); // 2 —Å–µ–∫—É–Ω–¥—ã
  digitalWrite(cameraPin, optocouplerActiveHigh ? LOW : HIGH);
  
  Serial.print("Setting pin "); Serial.print(cameraPin); 
  Serial.print(" to "); Serial.println(optocouplerActiveHigh ? "LOW" : "HIGH");
  Serial.println("üé• === CAMERA BUTTON RELEASE ===");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–º–∫–∞
void pressDoorButton() {
  Serial.println("üö™ === DOOR BUTTON PRESS START ===");
  Serial.print("Setting pin "); Serial.print(doorPin); 
  Serial.print(" to "); Serial.println(optocouplerActiveHigh ? "HIGH" : "LOW");
  
  digitalWrite(doorPin, optocouplerActiveHigh ? HIGH : LOW);
  delay(200); // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ 200ms
  digitalWrite(doorPin, optocouplerActiveHigh ? LOW : HIGH);
  
  Serial.print("Setting pin "); Serial.print(doorPin); 
  Serial.print(" to "); Serial.println(optocouplerActiveHigh ? "LOW" : "HIGH");
  Serial.println("üö™ === DOOR BUTTON RELEASE ===");
}

// –ü–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–º–æ—Ñ–æ–Ω–∞
void openIntercom() {
  Serial.println("=== Starting intercom opening sequence ===");
  
  // –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
  pressCameraButton();
  
  // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
  delay(500);
  
  // –ó–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–æ–∫
  pressDoorButton();
  
  Serial.println("=== Intercom opening sequence completed ===");
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
void checkIncomingCall() {
  int analogValue = analogRead(callIndicatorPin);
  bool currentCallState = (analogValue < normalVoltageThreshold);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  static unsigned long lastDebugTime = 0;
  if (millis() - lastDebugTime > 10000) {
    Serial.print("Call indicator A0 value: ");
    Serial.print(analogValue);
    Serial.print(" (threshold: ");
    Serial.print(normalVoltageThreshold);
    Serial.println(")");
    lastDebugTime = millis();
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
  if (currentCallState && !lastCallState) {
    // –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
    if (millis() - lastCallTime > callDebounceTime) {
      callDetected = true;
      lastCallTime = millis();
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ —á–µ—Ä–µ–∑ Telegram
      Serial.println("üîî === INCOMING CALL DETECTED ===");
      Serial.println("üìû Someone is calling the intercom!");
      
      String callMessage = "üîî –í–•–û–î–Ø–©–ò–ô –í–´–ó–û–í!\n\n–ö—Ç–æ-—Ç–æ –∑–≤–æ–Ω–∏—Ç –≤ –¥–æ–º–æ—Ñ–æ–Ω.\n–ù–∞–∂–º–∏—Ç–µ 'Open' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å.";
      bool sent = bot.sendMessageWithReplyKeyboard(CHAT_ID, callMessage, "", replyKeyboard, true, false, false);
      Serial.print("üì§ Telegram notification: "); Serial.println(sent ? "‚úÖ Sent" : "‚ùå Failed");
      
      Serial.println("================================");
    }
  }
  
  lastCallState = currentCallState;
}

// Handle new messages: only /start and one inline button "Open"
void handleNewMessages(int numNewMessages) {
  Serial.print("üì© handleNewMessages: "); Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;

    Serial.println("=== MESSAGE DEBUG ===");
    Serial.print("Chat ID: "); Serial.println(chat_id);
    Serial.print("Expected: "); Serial.println(CHAT_ID);
    Serial.print("Text: "); Serial.println(text);
    Serial.print("From: "); Serial.println(from_name);
    Serial.println("====================");

    if (chat_id != CHAT_ID) {
      Serial.println("‚ùå Unauthorized user - chat ID mismatch!");
      bot.sendMessage(chat_id, "Your Chat ID: " + chat_id + "\nUpdate secrets.h with this ID", "");
      continue;
    } else {
      Serial.println("‚úÖ Authorized user - processing message");
    }

    // Normal text messages only; reply keyboard sends text "Open"
    if (text == "/start") {
      Serial.println("üè† Processing /start command");
      String welcome = "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + from_name + "!\n\n–≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–º–æ—Ñ–æ–Ω–æ–º:\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ üîî\n‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞ üö™\n\n–ù–∞–∂–º–∏—Ç–µ 'Open' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–ª–∏ /status –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.";
      bot.sendMessageWithReplyKeyboard(chat_id, welcome, "", replyKeyboard, true, false, false);
    } else if (text == "Open") {
      Serial.println("üö™ Processing 'Open' command - INTERCOM SEQUENCE START");
      bot.sendMessage(chat_id, "üé• –í–∫–ª—é—á–∞—é –∫–∞–º–µ—Ä—É –¥–æ–º–æ—Ñ–æ–Ω–∞...", "");
      
      // –í–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É (2 —Å–µ–∫—É–Ω–¥—ã)
      pressCameraButton();
      
      bot.sendMessage(chat_id, "üö™ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–æ–∫...", "");
      
      // –ü–∞—É–∑–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞
      delay(500);
      pressDoorButton();
      
      bot.sendMessage(chat_id, "‚úÖ –î–æ–º–æ—Ñ–æ–Ω –æ—Ç–∫—Ä—ã—Ç!", "");
      Serial.println("üö™ INTERCOM SEQUENCE COMPLETED");
    } else if (text == "/status") {
      Serial.println("üìä Processing /status command");
      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
      int analogValue = analogRead(callIndicatorPin);
      String statusMessage = "üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´\n\n";
      statusMessage += "üîå –ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—Ö–æ–¥ A0: " + String(analogValue) + "\n";
      statusMessage += "‚ö° –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + String(normalVoltageThreshold) + "\n";
      statusMessage += "üö® –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–∑–æ–≤–∞: " + String(analogValue < normalVoltageThreshold ? "–í–´–ó–û–í" : "–ù–û–†–ú–ê") + "\n";
      statusMessage += "üåê IP –∞–¥—Ä–µ—Å: " + WiFi.localIP().toString();
      
      bot.sendMessage(chat_id, statusMessage, "");
    } else {
      Serial.print("‚ùì Unknown command received: '"); Serial.print(text); Serial.println("'");
      bot.sendMessageWithReplyKeyboard(chat_id, "üè† –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–º–æ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Open'\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã", "", replyKeyboard, true, false, false);
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  Serial.println("=== CONFIGURATION DEBUG ===");
  Serial.print("Secrets loaded from: "); Serial.println(SECRETS_SOURCE);
  Serial.print("WiFi SSID: "); Serial.println(WIFI_SSID);
  Serial.print("WiFi Password: "); Serial.println(WIFI_PASSWORD);
  Serial.print("Bot Token: "); Serial.println(BOT_TOKEN);
  Serial.print("Chat ID: "); Serial.println(CHAT_ID);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (String(WIFI_SSID) == "YOUR_WIFI_SSID") {
    Serial.println("üö® WARNING: Using template values! Real secrets.h not loaded!");
  } else {
    Serial.println("‚úÖ Real secrets loaded successfully");
  }
  
  // –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Serial.println("üí¨ SYSTEM INFO:");
  Serial.print("Chat ID: "); Serial.println(CHAT_ID);
  Serial.print("Board: "); 
  #ifdef ESP8266
    Serial.println("ESP8266");
  #endif
  #ifdef ARDUINO_ESP8266_WEMOS_D1MINI
    Serial.println("Wemos D1 Mini");
  #elif defined(ARDUINO_ESP8266_NODEMCU)
    Serial.println("NodeMCU");
  #else
    Serial.println("Generic ESP8266");
  #endif
  Serial.print("CPU Freq: "); Serial.print(ESP.getCpuFreqMHz()); Serial.println(" MHz");
  Serial.println("==============================");

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledState);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º
  pinMode(cameraPin, OUTPUT);
  pinMode(doorPin, OUTPUT);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–∂–∞—Ç—ã)
  digitalWrite(cameraPin, optocouplerActiveHigh ? LOW : HIGH);
  digitalWrite(doorPin, optocouplerActiveHigh ? LOW : HIGH);
  
  Serial.println("üîå GPIO PIN MAPPING:");
  Serial.print("Camera button: GPIO"); Serial.print(cameraPin);
  Serial.println(" (should be D1 on Wemos/D5 on NodeMCU)");
  Serial.print("Door button: GPIO"); Serial.print(doorPin); 
  Serial.println(" (should be D2 on Wemos/D4 on NodeMCU)");
  Serial.print("Call indicator: A0 (GPIO"); Serial.print(callIndicatorPin); Serial.println(")");
  Serial.print("Voltage threshold: "); Serial.println(normalVoltageThreshold);
  Serial.println("‚ö†Ô∏è  Verify GPIO pins match your hardware wiring!");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤—ã–∑–æ–≤–∞
  int initialVoltage = analogRead(callIndicatorPin);
  Serial.print("Initial A0 reading: "); Serial.println(initialVoltage);
  
  // –¢–µ—Å—Ç GPIO –ø–∏–Ω–æ–≤ - –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  Serial.println("üß™ Testing GPIO pins (brief flash)...");
  digitalWrite(cameraPin, !digitalRead(cameraPin)); delay(100);
  digitalWrite(cameraPin, !digitalRead(cameraPin));
  digitalWrite(doorPin, !digitalRead(doorPin)); delay(100); 
  digitalWrite(doorPin, !digitalRead(doorPin));
  Serial.println("‚úÖ GPIO pin test completed");

  // Connect to Wi-Fi
  Serial.println("=== WiFi CONNECTION DEBUG ===");
  Serial.print("MAC Address: "); Serial.println(WiFi.macAddress());
  
  #ifdef ESP8266
    WiFi.setSleepMode(WIFI_NONE_SLEEP);
  #endif
  WiFi.mode(WIFI_STA);
  
  Serial.print("Attempting to connect to SSID: "); Serial.println(ssid);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  const int maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥ timeout
  
  while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts) {
    delay(1000);
    attempts++;
    Serial.print("Connecting to WiFi.. Attempt ");
    Serial.print(attempts);
    Serial.print("/");
    Serial.print(maxAttempts);
    Serial.print(" - Status: ");
    
    switch (WiFi.status()) {
      case WL_IDLE_STATUS:
        Serial.println("IDLE");
        break;
      case WL_NO_SSID_AVAIL:
        Serial.println("NO_SSID_AVAILABLE");
        break;
      case WL_SCAN_COMPLETED:
        Serial.println("SCAN_COMPLETED");
        break;
      case WL_CONNECT_FAILED:
        Serial.println("CONNECT_FAILED");
        break;
      case WL_CONNECTION_LOST:
        Serial.println("CONNECTION_LOST");
        break;
      case WL_DISCONNECTED:
        Serial.println("DISCONNECTED");
        break;
      default:
        Serial.println("UNKNOWN");
        break;
    }
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("‚úÖ WiFi connected successfully!");
    Serial.print("IP address: "); Serial.println(WiFi.localIP());
    Serial.print("Gateway: "); Serial.println(WiFi.gatewayIP());
    Serial.print("Subnet: "); Serial.println(WiFi.subnetMask());
    Serial.print("DNS: "); Serial.println(WiFi.dnsIP());
    Serial.print("RSSI: "); Serial.print(WiFi.RSSI()); Serial.println(" dBm");
  } else {
    Serial.println("‚ùå WiFi connection FAILED!");
    Serial.println("Scanning for available networks...");
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏
    int networks = WiFi.scanNetworks();
    if (networks == 0) {
      Serial.println("No networks found");
    } else {
      Serial.print(networks);
      Serial.println(" networks found:");
      for (int i = 0; i < networks; ++i) {
        Serial.print(i + 1);
        Serial.print(": ");
        Serial.print(WiFi.SSID(i));
        Serial.print(" (");
        Serial.print(WiFi.RSSI(i));
        Serial.print(" dBm) ");
        Serial.print(WiFi.encryptionType(i) == 7 ? "Open" : "Secured");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å –Ω–∞—à–∏–º SSID
        if (WiFi.SSID(i) == String(ssid)) {
          Serial.print(" ‚Üê TARGET NETWORK FOUND!");
        }
        Serial.println();
      }
    }
    
    Serial.println("TROUBLESHOOTING:");
    Serial.println("1. Check SSID spelling and case sensitivity");
    Serial.println("2. Ensure network is 2.4GHz (ESP8266 doesn't support 5GHz)");
    Serial.println("3. Check if network is hidden");
    Serial.println("4. Verify signal strength");
    Serial.println("Device will continue without WiFi...");
  }

  // TLS setup - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è ESP8266
  Serial.println("üîí Setting up TLS/SSL...");
  #ifdef ESP8266
    client.setInsecure(); // simplify TLS for ESP8266
    client.setTimeout(10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    Serial.println("‚úÖ Using insecure TLS with 10s timeout");
  #else
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
    Serial.println("‚úÖ Using certificate validation for ESP32");
  #endif

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("=== TELEGRAM SETUP ===");
    Serial.print("üíæ Free heap: "); Serial.print(ESP.getFreeHeap()); Serial.println(" bytes");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    String startupMsg = "üè† –î–æ–º–æ—Ñ–æ–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nIP: " + WiFi.localIP().toString() + "\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!";
    bool sent = bot.sendMessageWithReplyKeyboard(CHAT_ID, startupMsg, "", replyKeyboard, true, false, false);
    Serial.print("üì§ Startup notification: "); Serial.println(sent ? "‚úÖ Sent" : "‚ùå Failed");
    
    Serial.println("ü§ñ Telegram bot ready!");
    Serial.println("============================");
  } else {
    Serial.println("Skipping Telegram setup - No WiFi connection");
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  static unsigned long lastMemCheck = 0;
  if (millis() - lastMemCheck > 30000) {
    Serial.print("üíæ Free: "); Serial.print(ESP.getFreeHeap()); Serial.println(" bytes");
    lastMemCheck = millis();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –≤—ã–∑–æ–≤—ã
  checkIncomingCall();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
  if (millis() > lastTimeBotRan + botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    
    while (numNewMessages) {
      Serial.println("üîÑ Processing Telegram messages...");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
  
  // Serial commands –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (Serial.available()) {
    String command = Serial.readString();
    command.trim();
    
    if (command == "open") {
      Serial.println("üö™ Manual open via Serial");
      // –≠–º—É–ª–∏—Ä—É–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
      Serial.println("üé• –í–∫–ª—é—á–∞—é –∫–∞–º–µ—Ä—É –¥–æ–º–æ—Ñ–æ–Ω–∞...");
      pressCameraButton();
      Serial.println("üö™ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–æ–∫...");
      delay(500);
      pressDoorButton();
      Serial.println("‚úÖ –î–æ–º–æ—Ñ–æ–Ω –æ—Ç–∫—Ä—ã—Ç!");
    } else if (command == "test") {
      bot.sendMessage(CHAT_ID, "Test message from Serial", "");
    } else if (command == "status") {
      Serial.print("üíæ Memory: "); Serial.print(ESP.getFreeHeap()); Serial.println(" bytes");
      Serial.print("üåê WiFi: "); Serial.println(WiFi.status() == WL_CONNECTED ? "Connected" : "Disconnected");
      Serial.print("üìä A0: "); Serial.print(analogRead(callIndicatorPin));
      Serial.println(analogRead(callIndicatorPin) < normalVoltageThreshold ? " (CALL)" : " (NORMAL)");
      Serial.print("üåê IP: "); Serial.println(WiFi.localIP());
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  static unsigned long lastCleanup = 0;
  if (millis() - lastCleanup > 5000) {
    yield();
    lastCleanup = millis();
    
    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏ –ø–∞–º—è—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ
    if (ESP.getFreeHeap() < 5000) {
      Serial.println("üö® CRITICAL LOW MEMORY - RESTARTING...");
      delay(1000);
      ESP.restart();
    }
  }
  
  // Watchdog protection - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∏—Å–ª–∞ –Ω–∞–¥–æ–ª–≥–æ
  static unsigned long lastActivity = millis();
  if (millis() - lastActivity > 300000) { // 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    Serial.println("üö® SYSTEM STUCK - RESTARTING...");
    ESP.restart();
  }
}

 